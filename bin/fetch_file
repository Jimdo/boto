import sys

def read_in_chunks(file_object, chunk_size=1024):
    """Lazy function (generator) to read a file piece by piece.
    Default chunk size: 1k."""
    while True:
        data = file_object.read(chunk_size)
        if not data:
            break
        yield data

if __name__ == "__main__":
    from optparse import OptionParser
    usage = """%prog [options] URI
Fetch a URI using the boto library and (by default) pipe contents to STDOUT
The URI can be either an HTTP URL, or "s3://bucket_name/key_name"
"""
    parser = OptionParser(version="0.1", usage=usage)
    parser.add_option("-o", "--out-file",
                      help="File to receive output instead of STDOUT",
                      dest="outfile")

    (options, args) = parser.parse_args()
    if len(args) < 1:
        parser.print_help()
        sys.exit(1)
    from boto.utils import fetch_file
    f = fetch_file(args[0])
    if options.outfile:
        with open(options.outfile, "ab") as outfile:
            for piece in read_in_chunks(f):
                outfile.write(piece)
    else:
        for piece in read_in_chunks(f):
            print(piece)
